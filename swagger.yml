openapi: 3.0.0
info:
  title: API Documentation
  description: Comprehensive API for authentication and user management.
  version: 1.0.0
servers:
  - url: http://localhost:3333
    description: Local server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Authenticates a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        400:
          description: Invalid credentials or captcha failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
  /auth/register:
    post:
      tags:
        - Auth
      summary: User Registration
      description: Registers a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterSuccessResponse'
        400:
          description: Captcha verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      description: Logs out the authenticated user.
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Sends a password reset email to the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        200:
          description: Reset link sent if email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Resets the user's password using a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change Password
      description: Allows an authenticated user to change their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        200:
          description: Password change successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Incorrect current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /articles:
    post:
      tags:
        - Articles
      summary: Create Article
      description: Create a new article.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        201:
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
  /articles/{id}:
    get:
      tags:
        - Articles
      summary: Get Article
      description: Retrieve a specific article by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Article details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
    patch:
      tags:
        - Articles
      summary: Update Article
      description: Update an article.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        200:
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
    delete:
      tags:
        - Articles
      summary: Delete Article
      description: Delete an article by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Article deleted successfully
  /articles/{courseId}/add:
    post:
      tags:
        - Articles
      summary: Add Article to Course
      description: Add a new article to a course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddArticleToCourseRequest'
      responses:
        201:
          description: Article added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'
  /articles/{articleId}/tags/{tagId}:
    post:
      tags:
        - Articles
      summary: Attach Tag to Article
      description: Assign a tag to an article.
      parameters:
        - name: articleId
          in: path
          required: true
          schema:
            type: integer
        - name: tagId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Tag attached successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponse'

  /courses:
    post:
      tags:
        - Courses
      summary: Create Course
      description: Create a new course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        201:
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get Course
      description: Retrieve a specific course by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Course details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
    patch:
      tags:
        - Courses
      summary: Update Course
      description: Update a course.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        200:
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
    delete:
      tags:
        - Courses
      summary: Delete Course
      description: Delete a course by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Course deleted successfully

  /invitations:
    post:
      tags:
        - Invitations
      summary: Create Invitation
      description: Send an invitation to a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
      responses:
        201:
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'

  /invitations/{id}:
    get:
      tags:
        - Invitations
      summary: Get Invitation
      description: Retrieve a specific invitation by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Invitation details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
    delete:
      tags:
        - Invitations
      summary: Delete Invitation
      description: Delete an invitation by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Invitation deleted successfully

  /tags:
    post:
      tags:
        - Tags
      summary: Create Tag
      description: Create a new tag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
      responses:
        201:
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'

  /tags/{id}:
    get:
      tags:
        - Tags
      summary: Get Tag
      description: Retrieve a specific tag by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Tag details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
    put:
      tags:
        - Tags
      summary: Update Tag
      description: Update an existing tag.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagRequest'
      responses:
        200:
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
    delete:
      tags:
        - Tags
      summary: Delete Tag
      description: Delete a tag by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Tag deleted successfully

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
        remember:
          type: boolean
          example: true
          nullable: true
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          example: "reset-token"
        password:
          type: string
          minLength: 8
          example: "newpassword123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          minLength: 8
          example: "oldpassword123"
        newPassword:
          type: string
          minLength: 8
          example: "newpassword123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    RegisterSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"


    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"

    LoginSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        email:
          type: string
          example: "anthony@gmail.com"

    NotFoundError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Resource not found"

    RateLimitError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Too many requests, please try again later."

    CreateArticleRequest:
      type: object
      properties:
        course_id:
          type: string
          example: "course-id"
        name:
          type: string
          example: "Dishwashing Liquid"
        quantity:
          type: integer
          example: 2
        tags_id:
          type: array
          items:
            type: integer
          example: [ 1, 2 ]

    UpdateArticleRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Article Name"
        quantity:
          type: integer
          example: 3
        tags_id:
          type: array
          items:
            type: integer
          example: [ 2, 3 ]

    AddArticleToCourseRequest:
      type: object
      properties:
        name:
          type: string
          example: "New Article"
        quantity:
          type: integer
          example: 1
        tags_id:
          type: array
          items:
            type: integer
          example: [ 1 ]

    ArticleResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Dishwashing Liquid"
        quantity:
          type: integer
          example: 2
        tags_id:
          type: array
          items:
            type: integer
          example: [ 1, 2 ]

    CreateCourseRequest:
      type: object
      properties:
        creator:
          type: string
          example: "user-id"
        name:
          type: string
          example: "My Shopping List"

    UpdateCourseRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Course Name"

    CourseResponse:
      type: object
      properties:
        id:
          type: string
          example: "course-id"
        name:
          type: string
          example: "My Shopping List"
        creator:
          type: string
          example: "user-id"
    CreateInvitationRequest:
      type: object
      properties:
        course_id:
          type: string
          example: "course-id"
        invited_email:
          type: string
          format: email
          example: "invitee@example.com"

    InvitationResponse:
      type: object
      properties:
        id:
          type: string
          example: "invitation-id"
        course_id:
          type: string
          example: "course-id"
        invited_email:
          type: string
          format: email
          example: "invitee@example.com"
    CreateTagRequest:
      type: object
      properties:
        name:
          type: string
          example: "Groceries"
        color:
          type: string
          example: "#ff0000"

    UpdateTagRequest:
      type: object
      properties:
        name:
          type: string
          example: "Updated Tag Name"
        color:
          type: string
          example: "#00ff00"

    TagResponse:
      type: object
      properties:
        id:
          type: string
          example: "tag-id"
        name:
          type: string
          example: "Groceries"
        color:
          type: string
          example: "#ff0000"
