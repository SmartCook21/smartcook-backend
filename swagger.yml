openapi: 3.0.0
info:
  title: API Documentation
  description: Comprehensive API for authentication and user management.
  version: 1.0.0
servers:
  - url: http://localhost:3333
    description: Local server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Authenticates a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        400:
          description: Invalid credentials or captcha failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        429:
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/register:
    post:
      tags:
        - Auth
      summary: User Registration
      description: Registers a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        200:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterSuccessResponse'
        400:
          description: Captcha verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      description: Logs out the authenticated user.
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Sends a password reset email to the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        200:
          description: Reset link sent if email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Resets the user's password using a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        404:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change Password
      description: Allows an authenticated user to change their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        200:
          description: Password change successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Incorrect current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
        remember:
          type: boolean
          example: true
          nullable: true
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          example: "user@example.com"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          example: "reset-token"
        password:
          type: string
          minLength: 8
          example: "newpassword123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          minLength: 8
          example: "oldpassword123"
        newPassword:
          type: string
          minLength: 8
          example: "newpassword123"
        turnstileToken:
          type: string
          example: "some-captcha-token"
          nullable: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    RegisterSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"


    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"

    LoginSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        email:
          type: string
          example: "anthony@gmail.com"

    NotFoundError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Resource not found"

    RateLimitError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Too many requests, please try again later."
